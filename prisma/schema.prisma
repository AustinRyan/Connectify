// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String         @unique
  password         String
  username         String         @unique
  bio              String?
  profilePic       String?
  coverPic         String?
  followers        Follower[]     @relation("UserFollowing")
  following        Follower[]     @relation("UserFollowers")
  tweets           Tweet[]
  likes            Like[]
  retweets         Retweet[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  notifications    Notification[]
}

model Tweet {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  likes     Like[]
  retweets  Retweet[]
}

model Follower {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])
}

model Like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  tweetId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
}

model Retweet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  tweetId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
}
